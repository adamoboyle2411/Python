import pygame
from sys import exit
from random import randint, choice

class PlayerClass(pygame.sprite.Sprite):
	def __init__(Self):
		super().__init__()
		PlayerWalk1 = pygame.image.load("graphics/player/player_walk_1.png").convert_alpha()
		PlayerWalk2 = pygame.image.load("graphics/player/player_walk_2.png").convert_alpha()
		Self.PlayerWalk = [PlayerWalk1, PlayerWalk2]
		Self.PlayerIndex = 0
		Self.PlayerJump = pygame.image.load("graphics/player/jump.png").convert_alpha()
		Self.image = Self.PlayerWalk[Self.PlayerIndex]
		Self.rect = Self.image.get_rect(midbottom = (80, 300))
		Self.Gravity = 0
		Self.JumpSound = pygame.mixer.Sound("audio/jump.mp3")
		Self.JumpSound.set_volume(0.5)
	def PlayerInput(Self):
		Keys = pygame.key.get_pressed()
		if Keys[pygame.K_SPACE] and Self.rect.bottom >= 300:
			Self.Gravity = -20
			Self.JumpSound.play()
	def ApplyGravity(Self):
		Self.Gravity += 1
		Self.rect.y += Self.Gravity
		if Self.rect.bottom >= 300:
			Self.rect.bottom = 300
	def AnimationState(Self):
		if Self.rect.bottom < 300: 
			Self.image = Self.PlayerJump
		else:
			Self.PlayerIndex += 0.1
			if Self.PlayerIndex >= len(Self.PlayerWalk):
				Self.PlayerIndex = 0
			Self.image = Self.PlayerWalk[int(Self.PlayerIndex)]
	def update(Self):
		Self.PlayerInput()
		Self.ApplyGravity()
		Self.AnimationState()

class ObstacleClass(pygame.sprite.Sprite):
	def __init__(Self, Type):
		super().__init__()
		if Type == "Fly":
			Fly1 = pygame.image.load("graphics/fly/fly1.png").convert_alpha()
			Fly2 = pygame.image.load("graphics/fly/fly2.png").convert_alpha()
			Self.Animation = [Fly1, Fly2]
			YPosition = 210
		else:
			Snail1 = pygame.image.load("graphics/snail/snail1.png").convert_alpha()
			Snail2 = pygame.image.load("graphics/snail/snail2.png").convert_alpha()
			Self.Animation = [Snail1, Snail2]
			YPosition = 300
		Self.AnimationIndex = 0
		Self.image = Self.Animation[Self.AnimationIndex]
		Self.rect = Self.image.get_rect(midbottom = (randint(900, 1100), YPosition))
	def AnimationState(Self):
		Self.AnimationIndex += 0.1 
		if Self.AnimationIndex >= len(Self.Animation):
			Self.AnimationIndex = 0
		Self.image = Self.Animation[int(Self.AnimationIndex)]
	def Destroy(Self):
		if Self.rect.x <= -100: 
			Self.kill()
	def update(Self):
		Self.AnimationState()
		Self.rect.x -= 6
		Self.Destroy()

def DisplayScore():
	CurrentTime = int(pygame.time.get_ticks() / 1000) - StartTime
	ScoreSurface = Font.render(f"Score: {CurrentTime}", False, "Black")
	ScoreRectangle = ScoreSurface.get_rect(center = (400, 50))
	Screen.blit(ScoreSurface, ScoreRectangle)
	return CurrentTime

def CollisionSprite():
	if pygame.sprite.spritecollide(Player.sprite, ObstacleGroup, False):
		ObstacleGroup.empty()
		return False
	else:
		return True

pygame.init()
Screen = pygame.display.set_mode((800,400))
pygame.display.set_caption("Adam's Game")
Clock = pygame.time.Clock()
Font = pygame.font.Font("font/Pixeltype.ttf", 50)
GameActive = False
StartTime = 0
Score = 0
BackgroundMusic = pygame.mixer.Sound("audio/music.wav")
BackgroundMusic.play(loops = -1)

Player = pygame.sprite.GroupSingle()
Player.add(PlayerClass())

ObstacleGroup = pygame.sprite.Group()

SkySurface = pygame.image.load("graphics/Sky.png").convert()
GroundSurface = pygame.image.load("graphics/ground.png").convert()

EndPlayer = pygame.image.load("graphics/player/player_stand.png").convert_alpha()
EndPlayer = pygame.transform.rotozoom(EndPlayer, 0, 2)
EndPlayerRectangle = EndPlayer.get_rect(center = (400, 200))

GameName = Font.render("GAME", False, "Black")
GameNameRectangle = GameName.get_rect(center = (400, 80))

GameMessage1 = Font.render("Press space to play", False, "Black")
GameMessageRectangle1 = GameMessage1.get_rect(center = (400, 330))
GameMessage2 = Font.render("Press space to play again", False, "Black")
GameMessageRectangle2 = GameMessage2.get_rect(center = (400, 360))

ObstacleTimer = pygame.USEREVENT + 1
pygame.time.set_timer(ObstacleTimer, 1500)

while True:

	for CurrentEvent in pygame.event.get():
		if CurrentEvent.type == pygame.QUIT:
			pygame.quit()
			exit()
		elif GameActive and CurrentEvent.type == ObstacleTimer:
			ObstacleGroup.add(ObstacleClass(choice(["Fly", "Snail", "Snail", "Snail"])))
		elif not GameActive:
			if CurrentEvent.type == pygame.KEYDOWN and CurrentEvent.key == pygame.K_SPACE:
				GameActive = True
				StartTime = int(pygame.time.get_ticks() / 1000)

	if GameActive:

		Screen.blit(SkySurface, (0, 0))
		Screen.blit(GroundSurface, (0, 300))
		Score = DisplayScore()
		
		Player.draw(Screen)
		Player.update()

		ObstacleGroup.draw(Screen)
		ObstacleGroup.update()

		GameActive = CollisionSprite()
		
	else:

		Screen.fill("Dark Green")
		Screen.blit(EndPlayer, EndPlayerRectangle)

		ScoreMessage = Font.render(f"Your score: {Score}", False, "Black")
		ScoreMessageRectangle = ScoreMessage.get_rect(center = (400, 310))

		Screen.blit(GameName, GameNameRectangle)
		if Score == 0:
			Screen.blit(GameMessage1, GameMessageRectangle1)
		else:
			Screen.blit(ScoreMessage, ScoreMessageRectangle)
			Screen.blit(GameMessage2, GameMessageRectangle2)

	pygame.display.update()
	Clock.tick(60)
